{
	"info": {
		"_postman_id": "e266774d-49cb-4be6-b9bd-bbd946a5c58a",
		"name": "User_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23969999"
	},
	"item": [
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify the endpoint returns a list of users\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "text/plain; v=1.0"
					}
				],
				"url": {
					"raw": "{{baseurl}}/Users",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(`Verify the data of user with ID: ${pm.collectionVariables.get('userID')} is returned`, function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('userID'));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var FetchUser = {",
							"    async: false,",
							"    crossDomain: true,",
							"    url: `${pm.collectionVariables.get('baseurl')}/Users`,",
							"    method: 'GET',",
							"};",
							"",
							"pm.sendRequest(FetchUser, (err, res) => { ",
							"    var jsonData = res.json();",
							"    pm.collectionVariables.set(\"userID\",jsonData[0].id)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{baseurl}}/Users/:userId",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"Users",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Set a value for username using the postman variable library",
							"var username  = pm.variables.replaceIn('{{$randomUserName}}')",
							"",
							"//Try to debug to verify a random fullname was created ",
							"console.log(username);",
							"",
							"//Store value in a collection variable ",
							"pm.collectionVariables.set(\"username\",username)",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(`Verify the user ${pm.collectionVariables.get('username')} as created successfully`, function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userName).to.eql(pm.collectionVariables.get('username'));",
							"",
							"    pm.collectionVariables.set(\"userID\", pm.response.json().id)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": {{$randomInt}},\n    \"userName\": \"{{username}}\",\n    \"password\": \"{{$randomPassword}}\"\n}"
				},
				"url": {
					"raw": "{{baseurl}}/Users",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Details",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Set a value for username using the postman variable library",
							"var username  = pm.variables.replaceIn('{{$randomUserName}}')",
							"",
							"//Try to debug to verify a random fullname was created ",
							"console.log(username);",
							"",
							"//Store value in a collection variable ",
							"pm.collectionVariables.set(\"username\",username)",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(`Verify the user ${pm.collectionVariables.get('username')} as created successfully`, function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.userName).to.eql(pm.collectionVariables.get('username'));",
							"",
							"    pm.collectionVariables.set(\"userID\", pm.response.json().id)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json; v=1.0"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": {{userID}},\n    \"userName\": \"{{username}}\",\n    \"password\": \"{{$randomPassword}}\"\n}"
				},
				"url": {
					"raw": "{{baseurl}}/Users/:userId",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"Users",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{baseurl}}/Users/:userId",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"Users",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userID}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseurl",
			"value": "https://fakerestapi.azurewebsites.net/api/v1",
			"type": "string"
		},
		{
			"key": "userID",
			"value": 1
		},
		{
			"key": "username",
			"value": ""
		}
	]
}